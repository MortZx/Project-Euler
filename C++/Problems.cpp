#include "pch.h"

#include "Problems.h"
#include <vector>
#include <cmath>
#include <string>

using std::vector;
using std::pow;
using std::to_string;

/*
=================
=   Problem 1   =	Multiples of 3 and 5
==================

If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

// Check if number is divisible by 3 or 5 and add to the sum
int problem1(int lim) {
	int ans = 0;
	for (size_t i = 0; i < lim; ++i) {
		if (i % 3 == 0 || i % 5 == 0) {
			ans += i;
		}
	}
	return ans;
}


/*
=================
=   Problem 2   =	Even Fibonacci numbers
==================


Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

// Can also create a solution that keeps the list of Fib sequence if needed
int problem2(int lim) {
	int a = 1;
	int b = 2;
	int next = 0;
	int total = 0;
	while (a <= lim) {
		if (a % 2 == 0) {
			total += a;
		}
		next = a + b;
		a = b;
		b = next;
	}
	return total;
}


/*
=================
=   Problem 3   =	Largest prime factor
==================


The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

// Can also create a solution that keeps the list of Fib sequence if needed
int problem3(int num) {
	vector<int> pFactors;
	int isPrime{ 2 };
	while (num > 1) {
		if (num % isPrime == 0) {
			pFactors.push_back(isPrime);
			num /= isPrime;
		}
		isPrime += 1;
	}
	return pFactors.back();
}


/*
=================
=   Problem 4   =	Largest palindrome product
==================


A palindromic number reads the same both ways. The largest palindrome made from
the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/

// Finds the largest palindrome made from the product of two n-digit specific
// numbers.Iterate through all possible numbers and save all palindroms in a list.
// !!appending to list is costly !!

// @param integer - number of digits for multiplied numbers
// @return integer - largest palindrome of the product of two n digit numbers
int problem4(int numDigits) {
	int minNum = pow(10, numDigits - 1);
	int maxNum = pow(10, numDigits);
	int isPrime = 2;
	vector<int> palindroms;
	for (size_t i = minNum; i < maxNum; ++i) {
		for (size_t x = minNum; x < maxNum; ++x) {
			if (to_string(i*x) == to_string(i*x)[::-1]) {
				palindroms.push_back(i*x);
			}
		}
	}
	return max(palindroms);
}
